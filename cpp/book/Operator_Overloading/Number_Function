//双目运算符重载
#include<iostream>
using namespace std;
class Complex
{
public:
      Complex(double r= 0.0,double i= 0.0):real(r),imag(i){}
      Complex operator+ (const Complex &c2) const;        //没改形参，用形参与其他值计算
      Complex operator- (const Complex &c2) const;
      void display() const;
private:
      double real;
      double imag;
};
Complex Complex::operator+(const Complex &c2) const       //成员函数运算符重载加类名::
{
      return Complex(real+ c2.real,imag+ c2.imag);        //创建一个无名对象作为返回值
}
Complex Complex::operator-(const Complex &c2) const
{
      return Complex(real-c2.real,imag-c2.imag);
}
void Complex::display() const
{
      cout<<"("<<real<<","<<imag<<")"<<endl;
}
int main()
{
      Complex c1(5,4);
      Complex c2(2,0);
      Complex c3;
      cout<<"c1= ";
      c1.display();
      cout<<"c2= ";
      c2.display();
      c3= c1-c2;
      cout<<"c3= ";
      c3.display();
      c3= c1+c2;
      cout<<"c3= ";
      c3.display();
      return 0;
}


//单目运算符重载


#include<iostream>
using namespace std;
class clock
{
public:
      Clock(int hour= 0,int minute= 0,int second= 0);
      void showTime() const;
      Clock& operator++();
      Clock& operator--(int);
private:
      int hour;
      int minute;
      int second;
};
Clock::Clock(int hour,int minute,int second)
{
      if(0<=hour && hour<24 && 0<=minute && minute <60 && 0<=second && second <60){
            this.hour= hour;
            this.minute= minute;
            this.second= second;
      }
      else{
            cout<<"Time Error!"<<endl;
      }
}
void Clock::showTime() const
{
      cout<<hour<<":"<<minute<<":"<<second<<endl;
}
Clock &Clock::operator++()          //前置运算符重载
{
      second++;
      if(second>=60){
            second-= 60;
            minute++;
            if(minute>=60){
                  minute-=60;
                  hour= (hour+1)%24;
            }
      }
      return *this
}
Clock Clock::operator++(int)       //后置运算符重载
{
      Clock old= *this;
      ++(*this);
      return old;
}
int main()
{
      Clock myClock(23,59,59);
      cout<<"First Time output:";
      myClock.showTime();
      cout<<"Show myClock++ : ";
      (myClock++).showTime();
      cout<<"Show++myClock: ";
      (++myClock).showTime();
      return 0;
}


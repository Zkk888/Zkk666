#include<iostream>
#include<iterator>
#include<algorithm>
#include<vector>
using namespace std;

template<class T,class InputIterator,class OutputIterator>          //<模板参数表>用来说明函数接受参数的类型
void mySort(InputIterator first,InputIterator last,OutputIterator result)   //函数模板
{
      vector<T>s;                     //深刻理解模板
      for(;first!=last;++first){
            s.push_back(*first);
      }
      sort(s.begin(),s.end());
      copy(s.begin(),s.end(),result);        //输出迭代器result
}
int main()
{
      double a[5]= {1.2,2.4,0.8,3.3,3.2};
      mySort<double>(a,a+5,ostream_iterator<double>(cout,""));
      cout<<endl;
      mySort<int>(istream_iterator<int>(cin),istream_iterator<int>(),ostream_iterator<int>(cout,""));
      cout<<endl;
      return 0;
}


struct Student
{
      int id;
      float gpa;
};
template<class T>
class Store
{
private:
      T item;
      bool haveValue;
public:
      Store();
      T&getElem();
      void putElem(const T &x);
};
template<class T>                          //类模板的实现重点
Store<T>::Store():haveValue(false){}

template<class T>
T &Store<T>::getElem()
{
      if(!haveValue){                               //存入以后的数据为true
            cout<<"No item present!"<<endl;
            exit(1);
      }
      return item;
}
template<class T>
void Store<T>::putElem(cinst T &x)                  //可以看作自定义构造函数，为数据成员赋初值
{
      haveValue= true;
      item= x;
}
int main()
{
      Store<int>s1,s2;                //数据成员是int的类模板的类实例
      s1.putElem(3);
      s2.putElem(-7);
      cout<<s1.getElem()<<" "<<s2.getElem()<<endl;

      Student g={1000,23};                  //定义结构体变量并赋初值
      Store<Student>s3;
      s3.putElem(g);              //数据成员是Student的类模板的类实例
      cout<<"The student id is "<<s3.getElem().id<<endl;            //两个点运算符

      Store<double>d;
      cout<<"Retrieving object d…";
      cout<<d.getElem()<<endl;
      return 0;
}
#include<iostream>
using namespace std;
class Base1
{
public:
      virtual void display() const= 0;        //纯虚函数
};

class Base2:public Base1
{
public:
      void display() const;          //覆盖重写是常识
};
void Base2::display() const
{
      cout<<"Base2::display()"<<endl;
}

class Derived:public Base2
{
public:
      void display() const;                //加virtual也对
};

void Derived::display() const
{
      cout<<"Derived::display()"<<endl;
}


void fun(Base1 *ptr)
{
      ptr->display();
}
int main()
{
      Base2 base2;
      Derived derived;         //没Base1的对象，因为他是有纯虚函数的抽象类
      fun(&base2);
      fun(&derived);         //类型兼容性规则：用派生类对象的地址初始化基类的指针
      return 0;
}


#include<iostream>
using namespace std;
class Base1
{
public:
      virtual void display() const;  //虚函数一定是非静态函数
                                           //出现在函数声明中，与虚基类的区别
};
void Base1::display() const
{
      cout<<"Base1::display()"<<endl;
}
class Base2:public Base1
{
public:
      void display() const;                  //覆盖基类虚函数的虚函数，可以不写display
};
void Base2::display() const
{
      cout<<"Base2::display()"<<endl;
}
class Derived:public Base2
{
public:
      void display() const;
};
void Derived::display() const
{
      cout<<"Derived::display()"<<endl;
}
void fun(Base1 *ptr)
{
      ptr->display();                  //通过成员函数调用虚函数或者通过指针和引用访问虚函数
}                                      //用的是基类的指针指向派生类对象，基类的引用作为派生类对象的别名
int main()
{
      Base1 base1;
      Base2 base2;
      Derived derived;
      fun(&base1);
      fun(&base2);                      //必须使用基类的指针和引用，但是有类型兼容规则
      fun(&derived);
      return 0;                        //实现多态
}


class Base()
{
public:
      virtual ~Base();                //运行多态，实现析构多态，用基类指针删除派生类对象调用的是基类的析构函数
                                   //但是用虚函数便可实现多态
};
Base::~Base()
{
      cout<<"Base destructor"<<endl;
}
class Derived:public Base
{
public:
      Derived();
      ~Derived();
private:
      int *p;
};
Derived::Derived(){p= new int(0);}
Derived::~Derived(){cout<<"Derived destructor"<<endl;delete p;}
void fun(Base* b){delete b;}


int main()
{
      Base *b= new Derived();
      fun(b);
      return 0;
}


类型兼容规则
 派生类对象隐含转换为基类对象（但是通过基类的对象访问虚函数无法在运行中动态绑定，无法实现运行多态）
 派生类对象初始化基类的引用
 派生类对象地址初始化基类指针